---
- name: Install Docker and Docker Compose
  hosts: all
  become: true
  vars:
    ansible_ssh_private_key_file: /home/administrator/themkeys/tyui.pem

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install required dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Gather facts about the target system
      setup:
        gather_subset:
          - distribution
          - distribution_release

    - name: Add Docker repository (Debian)
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      when: ansible_distribution == 'Debian'

    - name: Add Docker repository (Ubuntu)
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      when: ansible_distribution == 'Ubuntu'

    - name: Add Docker repository (Amazon Linux)
      command: 'amazon-linux-extras install -y docker'
      when: ansible_distribution == 'Amazon'

    - name: Install Docker (Debian/Ubuntu)
      apt:
        name: docker-ce
        state: present
        update_cache: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Start Docker service (Debian/Ubuntu)
      systemd:
        name: docker
        state: started
        enabled: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Add user to docker group (Debian/Ubuntu)
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Start Docker service (Amazon Linux)
      service:
        name: docker
        state: started
        enabled: yes
      when: ansible_distribution == 'Amazon'

    - name: Add user to docker group (Amazon Linux)
      command: 'usermod -a -G docker {{ ansible_user }}'
      when: ansible_distribution == 'Amazon'

    - name: Install Docker Compose
      shell: >
        curl -sL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      args:
        creates: /usr/local/bin/docker-compose

    - name: Make Docker Compose executable
      file:
        path: /usr/local/bin/docker-compose
        mode: 'a+x'

    - name: Copy Docker Compose file
      copy:
        src: docker-compose.yml
        dest: /home/docker-compose.yml

    - name: Execute Docker Compose
      command: sudo docker-compose up -d
      args:
        chdir: /home/
      become: yes

    - name: Create new Volume
      community.docker.docker_volume:
        name: portainer-data

    - name: Deploy Portainer
      community.docker.docker_container:
        name: portainer
        image: "docker.io/portainer/portainer-ce"
        ports:
          - "9443:9443"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer-data:/data
        restart_policy: always